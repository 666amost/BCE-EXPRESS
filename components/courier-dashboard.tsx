"use client"

import { useState, useEffect, useCallback, useRef } from "react"
import { useRouter } from "next/navigation"
import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { faSpinner, faSignOutAlt, faEye, faCheckCircle, faComment, faMapMarkerAlt, faExclamationTriangle } from '@fortawesome/free-solid-svg-icons'
import { Camera } from 'lucide-react'
import { supabaseClient } from "@/lib/auth"
import { BulkUpdateModal } from "./bulk-update-modal"
import { ContinuousScanModal } from "./continuous-scan-modal"
import { useToast } from "@/hooks/use-toast"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog"
import { Badge } from "@/components/ui/badge"
import Image from "next/image"
import { GoogleMapsButton } from "@/components/google-maps-button"
import {
  DeliveryParcel as DeliveryParcelIcon,
  Logout as LogoutIcon,
  CheckmarkFilled as CheckmarkIcon,
  WarningFilled as WarningIcon,
  View as ViewIcon,
  Map as MapIcon,
  Chat as ChatIcon,
  Box as BoxIcon,
  InProgress as InProgressIcon,
  Barcode as BarcodeIcon,
  Scan as ScanIcon,
  ChevronDown, ChevronUp
} from '@carbon/icons-react'

// Function to format phone number for WhatsApp
const formatPhoneForWhatsApp = (phoneNumber: string): string => {
  if (!phoneNumber) return "";
  
  // Remove all non-digit characters
  const cleanNumber = phoneNumber.replace(/\D/g, "");
  
  // If number starts with 0, replace with 62
  if (cleanNumber.startsWith("0")) {
    return "62" + cleanNumber.slice(1);
  }
  
  // If number already starts with 62, keep it
  if (cleanNumber.startsWith("62")) {
    return cleanNumber;
  }
  
  // For any other format, assume it's Indonesian and add 62
  return "62" + cleanNumber;
}

// Component for WhatsApp button
const WhatsAppButton = ({ phoneNumber, recipientName, courierName }: { phoneNumber: string; recipientName: string; courierName: string }) => {
  // Don't show if:
  // 1. Phone number is empty, N/A, or Auto Generated
  // 2. Phone number has less than 10 digits after cleaning
  if (!phoneNumber || 
      phoneNumber === "N/A" || 
      phoneNumber.toLowerCase().includes("auto generated") ||
      phoneNumber.toLowerCase().includes("autogenerated")) {
    return null;
  }
  
  const cleanNumber = phoneNumber.replace(/\D/g, "");
  if (cleanNumber.length < 10) {
    return null;
  }
  
  const formattedNumber = formatPhoneForWhatsApp(phoneNumber);
  const message = encodeURIComponent(`Halo pak ${recipientName}, saya ${courierName} kurir bce express. Yg akan mengirimkan paket bapak. Apakah alamat sudah sesuai di alamat pak? Atau boleh di kirimkan share lokasi nya?`);
  const whatsappUrl = `https://wa.me/${formattedNumber}?text=${message}`;
  
  return (
    <Button
      variant="outline"
      size="sm"
      className="ml-2 h-6 px-2 text-xs bg-green-50 hover:bg-green-100 border-green-200 text-green-700"
      onClick={() => window.open(whatsappUrl, "_blank")}
    >
      <FontAwesomeIcon icon={faComment} className="h-3 w-3 mr-1" />
      WA
    </Button>
  );
};

// Component for Maps button
const MapsButton = ({ address }: { address: string }) => {
  // Don't show if:
  // 1. Address is empty, N/A, or Auto Generated
  // 2. Address is too short (less than 10 characters to ensure it's properly filled)
  if (!address || 
      address === "N/A" || 
      address.toLowerCase().includes("auto generated") ||
      address.toLowerCase().includes("autogenerated") ||
      address.trim().length < 10) {
    return null;
  }
  
  const mapsUrl = `https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(address)}`;
  
  return (
    <Button
      variant="outline"
      size="sm"
      className="ml-2 h-6 px-2 text-xs bg-blue-50 hover:bg-blue-100 border-blue-200 text-blue-700"
      onClick={() => window.open(mapsUrl, "_blank")}
    >
      <FontAwesomeIcon icon={faMapMarkerAlt} className="h-3 w-3 mr-1" />
      Maps
    </Button>
  );
};

export function CourierDashboard() {
  const [currentUser, setCurrentUser] = useState<any>(null)
  const [completedCount, setCompletedCount] = useState(0)
  const [lastCompletedAwb, setLastCompletedAwb] = useState("")
  const [isBulkModalOpen, setIsBulkModalOpen] = useState(false)
  const [isContinuousScanOpen, setIsContinuousScanOpen] = useState(false)
  const [isDeliveredScanOpen, setIsDeliveredScanOpen] = useState(false)
  const [totalBulkShipments, setTotalBulkShipments] = useState(0)
  const [pendingDeliveries, setPendingDeliveries] = useState(0)
  const [bulkShipmentAwbs, setBulkShipmentAwbs] = useState<any[]>([])
  const [pendingShipments, setPendingShipments] = useState<any[]>([])
  const [showBulkDetails, setShowBulkDetails] = useState(false)
  const [showPendingDetails, setShowPendingDetails] = useState(false)
  const [completedTodayShipments, setCompletedTodayShipments] = useState<any[]>([])
  const [showCompletedTodayDetails, setShowCompletedTodayDetails] = useState(false)
  const [hasCompletedFirstDelivery, setHasCompletedFirstDelivery] = useState(false)
  const [expandAssignments, setExpandAssignments] = useState(false);
  const [expandPending, setExpandPending] = useState(false);
  const [showAllAssignments, setShowAllAssignments] = useState(false);

  const [isProfileLoading, setIsProfileLoading] = useState(true)
  const [isShipmentsLoading, setIsShipmentsLoading] = useState(false)
  const refreshTimeout = useRef<NodeJS.Timeout | null>(null)
  const locationUpdateInterval = useRef<NodeJS.Timeout | null>(null)

  const router = useRouter()
  const { toast } = useToast()

  const loadShipmentData = useCallback(async (user: any) => {
    setIsShipmentsLoading(true)
    try {
      const today = new Date()
      today.setHours(0, 0, 0, 0)
      const todayISOString = today.toISOString()
      const yesterday = new Date(today)
      yesterday.setDate(yesterday.getDate() - 1)
      const yesterdayISOString = yesterday.toISOString()
      
      const courierId = user?.id
      const courierName = user?.name || user?.email?.split("@")[0] || ""

      // Add timeout to all database queries
      const timeoutPromise = new Promise((_, reject) => 
        setTimeout(() => reject(new Error('Database timeout')), 15000)
      );

      // Get today's bulk shipments (Today's Assignment) - shipments created today that are not yet delivered/cancelled
      const bulkShipmentsPromise = supabaseClient
        .from("shipments")
        .select("awb_number, current_status, receiver_name, receiver_phone, receiver_address, updated_at")
        .eq("courier_id", courierId)
        .gte("created_at", todayISOString)
        .not("current_status", "in", '("delivered", "cancelled")') // Filter out delivered and cancelled shipments
        .order("updated_at", { ascending: false })
        .limit(50); 

      // Get pending deliveries with only necessary fields - with timeout
      const pendingPromise = supabaseClient
        .from("shipments")
        .select("awb_number, current_status, receiver_name, receiver_phone, receiver_address, created_at")
        .eq("courier_id", courierId)
        .in("current_status", ["out_for_delivery", "shipped"])
        .lt("created_at", todayISOString)
        .order("created_at", { ascending: false })
        .limit(50); // Limit results to improve performance

      // Get completed today with only necessary fields - with timeout
      const completedTodayPromise = supabaseClient
        .from("shipment_history")
        .select("awb_number, status, created_at, location")
        .eq("status", "delivered")
        .ilike("notes", `%${courierName}%`)
        .gte("created_at", todayISOString)
        .order("created_at", { ascending: false })
        .limit(100); // Limit results to improve performance

      // Execute all queries in parallel with timeout
      const [bulkShipmentsResult, pendingResult, completedTodayResult] = await Promise.allSettled([
        Promise.race([bulkShipmentsPromise, timeoutPromise]),
        Promise.race([pendingPromise, timeoutPromise]),
        Promise.race([completedTodayPromise, timeoutPromise])
      ]);

      // Handle bulk shipments result
      if (bulkShipmentsResult.status === 'fulfilled') {
        const { data: bulkShipmentsData, error: bulkShipmentsError } = bulkShipmentsResult.value as any;
        if (bulkShipmentsError) {
          setTotalBulkShipments(0);
          setBulkShipmentAwbs([]);
        } else {
          setTotalBulkShipments(bulkShipmentsData?.length || 0);
          setBulkShipmentAwbs(bulkShipmentsData || []);
        }
      } else {
        setTotalBulkShipments(0);
        setBulkShipmentAwbs([]);
      }

      // Handle pending deliveries result
      if (pendingResult.status === 'fulfilled') {
        const { data: pendingData, error: pendingError } = pendingResult.value as any;
        if (pendingError) {
          setPendingDeliveries(0);
          setPendingShipments([]);
        } else {
          setPendingDeliveries(pendingData?.length || 0);
          setPendingShipments(pendingData || []);
        }
      } else {
        setPendingDeliveries(0);
        setPendingShipments([]);
      }

      // Handle completed today result
      if (completedTodayResult.status === 'fulfilled') {
        const { data: completedTodayData, error: completedTodayError } = completedTodayResult.value as any;
        if (completedTodayError) {
          setCompletedCount(0);
          setCompletedTodayShipments([]);
          setLastCompletedAwb("");
        } else {
          setCompletedCount(completedTodayData?.length || 0);
          setCompletedTodayShipments(completedTodayData || []);
          if (completedTodayData && completedTodayData.length > 0) {
            const sortedData = [...completedTodayData].sort(
              (a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime(),
            );
            setLastCompletedAwb(sortedData[0].awb_number);
          } else {
            setLastCompletedAwb("");
          }
        }
      } else {
        setCompletedCount(0);
        setCompletedTodayShipments([]);
        setLastCompletedAwb("");
      }

    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to load shipment data. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsShipmentsLoading(false);
    }
  }, [toast]);

  const debouncedRefresh = useCallback((user: any) => {
    if (refreshTimeout.current) {
      clearTimeout(refreshTimeout.current)
    }
    
    const timeout = setTimeout(() => {
      loadShipmentData(user)
      refreshTimeout.current = null
    }, 1000)
    
    refreshTimeout.current = timeout
  }, [loadShipmentData])

  // Function to check if courier has completed any deliveries today
  const checkFirstDeliveryStatus = useCallback(async (user: any) => {
    try {
      const today = new Date()
      today.setHours(0, 0, 0, 0)
      const todayISOString = today.toISOString()
      const courierName = user?.name || user?.email?.split("@")[0] || ""

      const { data: completedToday, error } = await supabaseClient
        .from("shipment_history")
        .select("awb_number")
        .eq("status", "delivered")
        .ilike("notes", `%${courierName}%`)
        .gte("created_at", todayISOString)
        .limit(1)

      if (!error && completedToday && completedToday.length > 0) {
        setHasCompletedFirstDelivery(true)
      } else {
        setHasCompletedFirstDelivery(false)
      }
    } catch (error) {
      setHasCompletedFirstDelivery(false)
    }
  }, [])

  const loadUserProfile = useCallback(async () => {
    setIsProfileLoading(true);
    try {
      const { data: sessionData, error: sessionError } = await supabaseClient.auth.getSession();

      if (sessionError) {
        toast({
          title: "Error Session",
          description: sessionError.message || "Failed to get session. Please log in again.",
          variant: "destructive",
        });
        setIsProfileLoading(false);
        return;
      }
      if (!sessionData?.session?.user?.id) {
        router.push("/courier");
        setIsProfileLoading(false);
        return;
      }

      const userId = sessionData.session.user.id;
      const { data: userData, error: userError } = await supabaseClient
        .from("users")
        .select("*")
        .eq("id", userId)
        .single();

      if (userError) {
        toast({
          title: "Error User Data",
          description: userError.message || "Failed to fetch user data. Check RLS on 'users' table.",
          variant: "destructive",
        });
        setIsProfileLoading(false);
        return;
      }

      setCurrentUser(userData);
      setIsProfileLoading(false);
      
      // Check first delivery status
      await checkFirstDeliveryStatus(userData);
      
      loadShipmentData(userData);

    } catch (err: any) {
      setIsProfileLoading(false);
      toast({
        title: "Error",
        description: err.message || "Failed to load user profile. Please try again.",
        variant: "destructive",
      });
    }
  }, [loadShipmentData, router, toast, checkFirstDeliveryStatus]);

  // Geolocation update logic
  const updateCourierLocation = useCallback(async (userId: string) => {
    if ("geolocation" in navigator) {
      navigator.geolocation.getCurrentPosition(
        async (position) => {
          const { latitude, longitude } = position.coords;
          try {
            // Attempt to update existing record
            const { data: updatedData, error: updateError } = await supabaseClient
              .from('courier_current_locations')
              .update({
                latitude: latitude,
                longitude: longitude,
                updated_at: new Date().toISOString()
              })
              .eq('courier_id', userId)
              .select()
              .maybeSingle(); // Use maybeSingle to get null if no row found

            if (updateError) {
              // If it's a specific error for "no rows updated" (e.g., PGRST116 for PostgREST), then attempt insert
              // Note: supabase-js may not always expose PGRST116 explicitly, but `!updatedData` check handles no matching row.
              const { error: insertError } = await supabaseClient
                .from('courier_current_locations')
                .insert({
                  courier_id: userId,
                  latitude: latitude,
                  longitude: longitude
                });
              if (insertError) {
                toast({
                  title: "Location Save Failed",
                  description: insertError.message || "Could not save current location. Check RLS for INSERT.",
                  variant: "destructive",
                });
              }
            } else if (updatedData) { // If update was successful and data was returned
            } else { // If update was successful but no data was returned (e.g., no matching row for update)
              const { error: insertError } = await supabaseClient
                .from('courier_current_locations')
                .insert({
                  courier_id: userId,
                  latitude: latitude,
                  longitude: longitude
                });
              if (insertError) {
                toast({
                  title: "Location Save Failed",
                  description: insertError.message || "Could not save current location. Check RLS for INSERT.",
                  variant: "destructive",
                });
              }
            }

          } catch (dbError: any) {
            toast({
              title: "Location DB Error",
              description: dbError.message || "An unexpected database error occurred for location.",
              variant: "destructive",
            });
          }
        },
        (error) => {
          if (error.code === error.PERMISSION_DENIED) {
            toast({
              title: "Geolocation Denied",
              description: "Please allow location access to enable live tracking.",
              variant: "default",
            });
          } else {
            toast({
              title: "Geolocation Error",
              description: error.message || "Could not get current location.",
              variant: "destructive",
            });
          }
        },
        {
          enableHighAccuracy: true,
          timeout: 10000, // 10 seconds
          maximumAge: 0 // No cache
        }
      );
    } else {
      toast({
        title: "Geolocation Not Supported",
        description: "Your browser does not support Geolocation.",
        variant: "destructive",
      });
    }
  }, [toast]);

  useEffect(() => {
    loadUserProfile();

    // Cleanup function
    return () => {
      if (refreshTimeout.current) {
        clearTimeout(refreshTimeout.current);
      }
      if (locationUpdateInterval.current) {
        clearInterval(locationUpdateInterval.current);
        locationUpdateInterval.current = null;
      }
    };
  }, [loadUserProfile]);

  // Separate useEffect for location tracking that depends on hasCompletedFirstDelivery
  useEffect(() => {
    const setupLocationUpdates = async () => {
      if (!hasCompletedFirstDelivery) {
        // Clear any existing interval if tracking should be disabled
        if (locationUpdateInterval.current) {
          clearInterval(locationUpdateInterval.current);
          locationUpdateInterval.current = null;
        }
        return;
      }

      const { data: sessionData } = await supabaseClient.auth.getSession();
      const currentUserId = sessionData?.session?.user?.id || null;

      if (currentUserId) {
        // Clear any existing interval first
        if (locationUpdateInterval.current) {
          clearInterval(locationUpdateInterval.current);
          locationUpdateInterval.current = null;
        }

        // Function to start/resume interval
        const startLocationInterval = () => {
          if (locationUpdateInterval.current) {
            clearInterval(locationUpdateInterval.current);
          }
          // Initial location update immediately
          updateCourierLocation(currentUserId);
          
          // Set up interval for every 5 minutes (reduced from 1 minute to save bandwidth)
          locationUpdateInterval.current = setInterval(() => {
            updateCourierLocation(currentUserId);
          }, 5 * 60 * 1000); // Update every 5 minutes (300 seconds)
        };

        // Function to pause interval
        const pauseLocationInterval = () => {
          if (locationUpdateInterval.current) {
            clearInterval(locationUpdateInterval.current);
            locationUpdateInterval.current = null;
          }
        };

        // Handle visibility changes
        const handleVisibilityChange = () => {
          if (document.hidden) {
            pauseLocationInterval();
          } else {
            startLocationInterval(); // Resume when tab becomes active
          }
        };

        // Initial start if tab is visible
        if (!document.hidden) {
          startLocationInterval();
        }

        // Add event listener for visibility change
        document.addEventListener('visibilitychange', handleVisibilityChange);

        // Return cleanup function
        return () => {
          if (locationUpdateInterval.current) {
            clearInterval(locationUpdateInterval.current);
            locationUpdateInterval.current = null;
          }
          document.removeEventListener('visibilitychange', handleVisibilityChange);
        };

      }
    };

    setupLocationUpdates();

    return () => {
      // This outer return cleanup handles unmount of the component
      // Inner return from setupLocationUpdates handles specific interval and listener cleanup
    };
  }, [hasCompletedFirstDelivery, updateCourierLocation]);

  const handleBulkUpdateSuccess = (count: number) => {
    toast({
      title: "Bulk Update Successful",
      description: `${count} shipments have been updated to "Out For Delivery" status.`,
    })
    if (currentUser) {
      debouncedRefresh(currentUser)
      // Re-check delivery status after bulk update
      checkFirstDeliveryStatus(currentUser)
    }
  }

  const handleContinuousScanSuccess = () => {
    if (currentUser) {
      debouncedRefresh(currentUser)
      // Re-check delivery status after continuous scan
      checkFirstDeliveryStatus(currentUser)
    }
  }

  const handleDeliveredScanSuccess = () => {
    if (currentUser) {
      debouncedRefresh(currentUser)
      // Re-check delivery status after delivered scan
      checkFirstDeliveryStatus(currentUser)
    }
  }

  const handleLogout = async () => {
    try {
      await supabaseClient.auth.signOut()
      router.push("/courier")
    } catch (err) {
    }
  }

  if (isProfileLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-100 to-white dark:from-black dark:to-gray-900 flex justify-center items-center">
        <div className="text-center">
          <InProgressIcon className="h-8 w-8 animate-spin text-primary" />
          <p className="text-gray-600 dark:text-gray-400 font-semibold animate-pulse mt-2">Loading user profile...</p>
        </div>
      </div>
    )
  }

  const displayName = currentUser?.name || currentUser?.email?.split("@")[0] || ""
  const emailDisplay = currentUser?.email || ""
  // Tambahkan logo (bisa pakai /images/bce-logo.png)
  const logoUrl = "/images/bce-logo.png";

  // Urutkan assignments berdasarkan created_at ASC (terlama di atas)
  const sortedAssignments = [...bulkShipmentAwbs].sort((a, b) => new Date(a.created_at).getTime() - new Date(b.created_at).getTime());

  return (
    <div className="min-h-screen bg-white dark:bg-gray-900">
      {/* Watermark Background */}
      <div className="fixed inset-0 grid grid-cols-6 gap-x-12 gap-y-8 p-8 pointer-events-none select-none opacity-[0.04] z-0">
        {Array.from({ length: 48 }).map((_, i) => (
          <div key={i} className="text-black dark:text-white -rotate-[36deg]">
            <span className="font-semibold text-sm whitespace-nowrap">BCE Express</span>
          </div>
        ))}
      </div>
      {/* Header */}
      <header className="flex items-center justify-between px-4 py-4 bg-white/70 backdrop-blur rounded-b-2xl shadow-md border-b border-gray-200 sticky top-0 z-10">
        <div className="flex items-center gap-2">
          <Image src={logoUrl} alt="BCE Logo" width={32} height={32} className="rounded" />
        </div>
        <div className="flex-1 text-center">
          <span className="font-bold text-lg text-gray-900">{displayName}</span>
          {lastCompletedAwb && (
            <div className="text-xs text-blue-600 mt-1">
              Last AWB job finished: <span className="font-mono">{lastCompletedAwb}</span>
            </div>
          )}
        </div>
        <Button
          variant="ghost"
          onClick={handleLogout}
          className="h-8 px-2 text-xs font-bold text-gray-700"
        >
          <LogoutIcon className="h-5 w-5" />
        </Button>
      </header>

      {/* Quick Stats as Accordions */}
      <div className="flex flex-col gap-3 px-3 py-4">
        {/* Assignments Card */}
        <div className="relative overflow-hidden bg-white/60 backdrop-blur rounded-2xl shadow border border-blue-200 px-4 py-3">
          <div className="absolute left-0 top-0 w-16 h-16 bg-blue-100 rounded-full opacity-30 blur-2xl z-0" />
          <button className="flex items-center w-full justify-between z-10 relative" onClick={() => setExpandAssignments(v => !v)}>
            <div className="flex items-center gap-3">
              <div className="bg-blue-50 rounded-full p-2">
                <DeliveryParcelIcon className="h-7 w-7 text-blue-600" />
              </div>
              <div className="text-xs text-gray-500 font-semibold">Assignments</div>
            </div>
            <div className="text-3xl font-black text-blue-700">{totalBulkShipments}</div>
            {expandAssignments ? <ChevronUp className="h-6 w-6 text-gray-400 ml-2" /> : <ChevronDown className="h-6 w-6 text-gray-400 ml-2" />}
          </button>
          {expandAssignments && (
            <div className="mt-3 flex flex-col gap-2 z-10 relative">
              {sortedAssignments.length === 0 ? (
                <div className="text-gray-400 text-sm">Tidak ada tugas hari ini.</div>
              ) : (
                <>
                  {sortedAssignments.slice(0, 5).map((shipment) => (
                    <div key={shipment.awb_number} className="flex items-center justify-between bg-gray-50 dark:bg-gray-900 rounded-lg border border-gray-100 dark:border-gray-700 px-3 py-2">
                      <div>
                        <div className="font-mono font-bold text-blue-700 dark:text-blue-300 text-base">{shipment.awb_number}</div>
                        <div className="text-xs text-gray-500">{shipment.receiver_name}</div>
                        <div className="text-xs text-gray-400">{shipment.receiver_address}</div>
                        <div className="flex gap-2 mt-1">
                          <WhatsAppButton phoneNumber={shipment.receiver_phone} recipientName={shipment.receiver_name || "Customer"} courierName={displayName} />
                          <MapsButton address={shipment.receiver_address} />
                        </div>
                      </div>
                      <Button size="sm" className="bg-blue-600 hover:bg-blue-700 text-white font-bold rounded-lg" onClick={() => router.push(`/courier/update?awb=${shipment.awb_number}`)}>
                        Update
                      </Button>
                    </div>
                  ))}
                  {sortedAssignments.length > 5 && (
                    <Button variant="ghost" className="w-full text-blue-600 font-bold mt-2" onClick={() => setShowAllAssignments(true)}>
                      Lihat Semua
                    </Button>
                  )}
                </>
              )}
            </div>
          )}
        </div>
        {/* Completed Card */}
        <div className="relative overflow-hidden bg-white/60 backdrop-blur rounded-2xl shadow border border-green-200 px-4 py-3">
          <div className="absolute left-0 top-0 w-16 h-16 bg-green-100 rounded-full opacity-30 blur-2xl z-0" />
          <div className="flex items-center w-full justify-between z-10 relative">
            <div className="flex items-center gap-3">
              <div className="bg-green-50 rounded-full p-2">
                <CheckmarkIcon className="h-7 w-7 text-green-600" />
              </div>
              <div className="text-xs text-gray-500 font-semibold">Completed</div>
            </div>
            <div className="text-3xl font-black text-green-600">{completedCount}</div>
          </div>
        </div>
        {/* Pending Card */}
        <div className="relative overflow-hidden bg-white/60 backdrop-blur rounded-2xl shadow border border-yellow-200 px-4 py-3">
          <div className="absolute left-0 top-0 w-16 h-16 bg-yellow-100 rounded-full opacity-30 blur-2xl z-0" />
          <button className="flex items-center w-full justify-between z-10 relative" onClick={() => setExpandPending(v => !v)}>
            <div className="flex items-center gap-3">
              <div className="bg-yellow-50 rounded-full p-2">
                <WarningIcon className="h-7 w-7 text-yellow-600" />
              </div>
              <div className="text-xs text-gray-500 font-semibold">Pending</div>
            </div>
            <div className="text-3xl font-black text-yellow-600">{pendingDeliveries}</div>
            {expandPending ? <ChevronUp className="h-6 w-6 text-gray-400 ml-2" /> : <ChevronDown className="h-6 w-6 text-gray-400 ml-2" />}
          </button>
          {expandPending && (
            <div className="mt-3 flex flex-col gap-2 z-10 relative">
              {pendingShipments.length === 0 ? (
                <div className="text-gray-400 text-sm">Tidak ada pending deliveries.</div>
              ) : (
                pendingShipments.map((shipment) => (
                  <div key={shipment.awb_number} className="flex items-center justify-between bg-gray-50 dark:bg-gray-900 rounded-lg border border-gray-100 dark:border-gray-700 px-3 py-2">
                    <div>
                      <div className="font-mono font-bold text-yellow-700 dark:text-yellow-300 text-base">{shipment.awb_number}</div>
                      <div className="text-xs text-gray-500">{shipment.receiver_name}</div>
                      <div className="text-xs text-gray-400">{shipment.receiver_address}</div>
                      <div className="flex gap-2 mt-1">
                        <WhatsAppButton phoneNumber={shipment.receiver_phone} recipientName={shipment.receiver_name || "Customer"} courierName={displayName} />
                        <MapsButton address={shipment.receiver_address} />
                      </div>
                    </div>
                    <Button size="sm" className="bg-yellow-500 hover:bg-yellow-600 text-white font-bold rounded-lg" onClick={() => router.push(`/courier/update?awb=${shipment.awb_number}`)}>
                      Update
                    </Button>
                  </div>
                ))
              )}
            </div>
          )}
        </div>
      </div>

      {/* Quick Actions */}
      <div className="flex flex-col gap-3 px-3 mb-4">
        <Button className="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold text-base py-3 flex items-center justify-center gap-2 rounded-xl shadow" onClick={() => setIsContinuousScanOpen(true)}>
          <BarcodeIcon className="h-5 w-5" /> Scan Resi
        </Button>
        <Button className="w-full bg-green-600 hover:bg-green-700 text-white font-bold text-base py-3 flex items-center justify-center gap-2 rounded-xl shadow" onClick={() => setIsBulkModalOpen(true)}>
          <BoxIcon className="h-5 w-5" /> Update Manual
        </Button>
      </div>

      {/* Floating DLVD Scan Button (mobile only) */}
      <Button onClick={() => setIsDeliveredScanOpen(true)} className="fixed bottom-5 right-5 z-50 bg-black hover:bg-gray-900 text-white rounded-full shadow-lg p-0 w-16 h-16 flex items-center justify-center sm:hidden">
        <BarcodeIcon className="h-10 w-10 text-white" />
      </Button>

      {/* Modals tetap ada, tidak diubah */}
      <BulkUpdateModal
        isOpen={isBulkModalOpen}
        onClose={() => setIsBulkModalOpen(false)}
        onSuccess={handleBulkUpdateSuccess}
      />
      <ContinuousScanModal
        isOpen={isContinuousScanOpen}
        onClose={() => setIsContinuousScanOpen(false)}
        onSuccess={handleContinuousScanSuccess}
      />
      <ContinuousScanModal
        isOpen={isDeliveredScanOpen}
        onClose={() => setIsDeliveredScanOpen(false)}
        onSuccess={handleDeliveredScanSuccess}
        prefillStatus="delivered"
      />
      {/* Dialog detail tetap ada, tidak diubah */}
      {/* Bulk Shipments Details Dialog */}
      <Dialog open={showBulkDetails} onOpenChange={setShowBulkDetails}>
        <DialogContent className="max-w-3xl">
          <DialogHeader>
            <DialogTitle>Bulk Shipments Details</DialogTitle>
            <DialogDescription>
              These are the shipments that have been marked as "Out For Delivery" and are pending delivery
            </DialogDescription>
          </DialogHeader>

          <div className="max-h-[60vh] overflow-y-auto mt-4">
            {isShipmentsLoading && (bulkShipmentAwbs.length === 0) ? (
              <div className="animate-pulse space-y-4">
                <div className="h-6 bg-gray-200 dark:bg-gray-700 rounded w-40"></div>
                <div className="space-y-2">
                  <div className="h-16 bg-gray-200 dark:bg-gray-700 rounded"></div>
                  <div className="h-16 bg-gray-200 dark:bg-gray-700 rounded"></div>
                  <div className="h-16 bg-gray-200 dark:bg-gray-700 rounded"></div>
                </div>
              </div>
            ) : bulkShipmentAwbs.length > 0 ? (
              <div className="space-y-3">
                {bulkShipmentAwbs.map((shipment) => (
                  <div
                    key={shipment.awb_number}
                    className="p-3 border rounded-md flex justify-between items-center hover:bg-muted/50 transition-colors"
                  >
                    <div>
                      <div className="flex items-center gap-2">
                        <DeliveryParcelIcon className="h-4 w-4 text-blue-500" />
                        <span className="font-mono font-medium">{shipment.awb_number}</span>
                        <Badge variant="outline" className="ml-2">
                          Out For Delivery
                        </Badge>
                      </div>
                      <p className="text-sm mt-1">Receiver: {shipment.receiver_name !== "Auto Generated" ? shipment.receiver_name : "Auto Generated Shipment"}</p>
                      <div className="flex items-center mt-1">
                        <p className="text-sm">Phone: {shipment.receiver_phone || "N/A"}</p>
                        {shipment.receiver_phone && (
                          <WhatsAppButton 
                            phoneNumber={shipment.receiver_phone} 
                            recipientName={shipment.receiver_name || "Customer"} 
                            courierName={displayName}
                          />
                        )}
                      </div>
                      <div className="flex items-center mt-1">
                        <p className="text-sm">Address: {shipment.receiver_address}</p>
                        <MapsButton address={shipment.receiver_address} />
                      </div>
                      <p className="text-sm mt-1">Current Status: {shipment.current_status}</p>
                      <p className="text-xs text-muted-foreground mt-1">
                        Updated: {new Date(shipment.updated_at).toLocaleString()}
                      </p>
                    </div>
                    <Button size="sm" onClick={() => router.push(`/courier/update?awb=${shipment.awb_number}`)}>
                      Update
                    </Button>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-8 text-muted-foreground">No bulk shipments found</div>
            )}
          </div>
        </DialogContent>
      </Dialog>

      {/* Add Pending Deliveries Dialog */}
      <Dialog open={showPendingDetails} onOpenChange={setShowPendingDetails}>
        <DialogContent className="max-w-3xl">
          <DialogHeader>
            <DialogTitle>Pending Deliveries</DialogTitle>
            <DialogDescription>
              These are shipments from previous days that are still pending delivery
            </DialogDescription>
          </DialogHeader>

          <div className="max-h-[60vh] overflow-y-auto mt-4">
            {isShipmentsLoading && (pendingShipments.length === 0) ? (
              <div className="animate-pulse space-y-4">
                <div className="h-6 bg-gray-200 dark:bg-gray-700 rounded w-40"></div>
                <div className="space-y-2">
                  <div className="h-16 bg-gray-200 dark:bg-gray-700 rounded"></div>
                  <div className="h-16 bg-gray-200 dark:bg-gray-700 rounded"></div>
                  <div className="h-16 bg-gray-200 dark:bg-gray-700 rounded"></div>
                </div>
              </div>
            ) : pendingShipments.length > 0 ? (
              <div className="space-y-3">
                {pendingShipments.map((shipment) => (
                  <div
                    key={shipment.awb_number}
                    className="p-3 border rounded-md flex justify-between items-center hover:bg-muted/50 transition-colors"
                  >
                    <div>
                      <div className="flex items-center gap-2">
                        <DeliveryParcelIcon className="h-4 w-4 text-yellow-500" />
                        <span className="font-mono font-medium">{shipment.awb_number}</span>
                        <Badge variant="outline" className="text-xs">OFD</Badge>
                      </div>
                      <p className="text-sm mt-1">Receiver: {shipment.receiver_name !== "Auto Generated" ? shipment.receiver_name : "Auto Generated Shipment"}</p>
                      <div className="flex items-center mt-1">
                        <p className="text-sm">Phone: {shipment.receiver_phone || "N/A"}</p>
                        {shipment.receiver_phone && (
                          <WhatsAppButton 
                            phoneNumber={shipment.receiver_phone} 
                            recipientName={shipment.receiver_name || "Customer"} 
                            courierName={displayName}
                          />
                        )}
                      </div>
                      <div className="flex items-center mt-1">
                        <p className="text-sm">Address: {shipment.receiver_address}</p>
                        <MapsButton address={shipment.receiver_address} />
                      </div>
                      <p className="text-xs text-muted-foreground mt-1">
                        Created: {new Date(shipment.created_at).toLocaleString()}
                      </p>
                    </div>
                    <Button size="sm" onClick={() => router.push(`/courier/update?awb=${shipment.awb_number}`)}>
                      Update
                    </Button>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-8 text-muted-foreground">No pending deliveries found</div>
            )}
          </div>
        </DialogContent>
      </Dialog>

      {/* Completed Today Details Dialog */}
      <Dialog open={showCompletedTodayDetails} onOpenChange={setShowCompletedTodayDetails}>
        <DialogContent className="max-w-3xl">
          <DialogHeader>
            <DialogTitle>Shipments Completed Today</DialogTitle>
            <DialogDescription>These are the shipments that you have marked as "Delivered" today.</DialogDescription>
          </DialogHeader>

          <div className="max-h-[60vh] overflow-y-auto mt-4">
            {isShipmentsLoading && (completedTodayShipments.length === 0) ? (
              <div className="animate-pulse space-y-4">
                <div className="h-6 bg-gray-200 dark:bg-gray-700 rounded w-40"></div>
                <div className="space-y-2">
                  <div className="h-16 bg-gray-200 dark:bg-gray-700 rounded"></div>
                  <div className="h-16 bg-gray-200 dark:bg-gray-700 rounded"></div>
                  <div className="h-16 bg-gray-200 dark:bg-gray-700 rounded"></div>
                </div>
              </div>
            ) : completedTodayShipments.length > 0 ? (
              <div className="space-y-3">
                {completedTodayShipments.map((shipment) => (
                  <div
                    key={shipment.awb_number}
                    className="p-3 border rounded-md flex justify-between items-center hover:bg-muted/50 transition-colors"
                  >
                    <div>
                      <div className="flex items-center gap-2">
                        <FontAwesomeIcon icon={faCheckCircle} className="h-4 w-4 text-green-500" />
                        <span className="font-mono font-medium">{shipment.awb_number}</span>
                      </div>
                      <p className="text-sm mt-1">Location: {shipment.location}</p>
                      <p className="text-xs text-muted-foreground mt-1">
                        Completed at: {new Date(shipment.created_at).toLocaleString()}
                      </p>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-8 text-muted-foreground">No shipments completed today</div>
            )}
          </div>
        </DialogContent>
      </Dialog>

      {/* Modal All Assignments */}
      <Dialog open={showAllAssignments} onOpenChange={setShowAllAssignments}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>Semua Tugas Hari Ini</DialogTitle>
            <DialogDescription>Daftar lengkap resi assignments hari ini.</DialogDescription>
          </DialogHeader>
          <div className="max-h-[60vh] overflow-y-auto mt-4 flex flex-col gap-2">
            {sortedAssignments.map((shipment) => (
              <div key={shipment.awb_number} className="flex items-center justify-between bg-gray-50 dark:bg-gray-900 rounded-lg border border-gray-100 dark:border-gray-700 px-3 py-2">
                <div>
                  <div className="font-mono font-bold text-blue-700 dark:text-blue-300 text-base">{shipment.awb_number}</div>
                  <div className="text-xs text-gray-500">{shipment.receiver_name}</div>
                  <div className="text-xs text-gray-400">{shipment.receiver_address}</div>
                  <div className="flex gap-2 mt-1">
                    <WhatsAppButton phoneNumber={shipment.receiver_phone} recipientName={shipment.receiver_name || "Customer"} courierName={displayName} />
                    <MapsButton address={shipment.receiver_address} />
                  </div>
                </div>
                <Button size="sm" className="bg-blue-600 hover:bg-blue-700 text-white font-bold rounded-lg" onClick={() => { setShowAllAssignments(false); router.push(`/courier/update?awb=${shipment.awb_number}`); }}>
                  Update
                </Button>
              </div>
            ))}
          </div>
        </DialogContent>
      </Dialog>
    </div>
  )
}
