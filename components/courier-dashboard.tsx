"use client"

import { useState, useEffect, useCallback, useRef } from "react"
import { useRouter } from "next/navigation"
import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { faSpinner, faSignOutAlt, faEye, faCheckCircle, faComment, faMapMarkerAlt, faExclamationTriangle } from '@fortawesome/free-solid-svg-icons'
import { Camera } from 'lucide-react'
import { supabaseClient } from "@/lib/auth"
import { BulkUpdateModal } from "./bulk-update-modal"
import { ContinuousScanModal } from "./continuous-scan-modal"
import { useToast } from "@/hooks/use-toast"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog"
import { Badge } from "@/components/ui/badge"
import Image from "next/image"
import { GoogleMapsButton } from "@/components/google-maps-button"
import {
  DeliveryParcel as DeliveryParcelIcon,
  Logout as LogoutIcon,
  CheckmarkFilled as CheckmarkIcon,
  WarningFilled as WarningIcon,
  View as ViewIcon,
  Map as MapIcon,
  Chat as ChatIcon,
  Box as BoxIcon,
  InProgress as InProgressIcon,
  Barcode as BarcodeIcon,
  Scan as ScanIcon
} from '@carbon/icons-react'

// Function to format phone number for WhatsApp
const formatPhoneForWhatsApp = (phoneNumber: string): string => {
  if (!phoneNumber) return "";
  
  // Remove all non-digit characters
  const cleanNumber = phoneNumber.replace(/\D/g, "");
  
  // If number starts with 0, replace with 62
  if (cleanNumber.startsWith("0")) {
    return "62" + cleanNumber.slice(1);
  }
  
  // If number already starts with 62, keep it
  if (cleanNumber.startsWith("62")) {
    return cleanNumber;
  }
  
  // For any other format, assume it's Indonesian and add 62
  return "62" + cleanNumber;
}

// Component for WhatsApp button
const WhatsAppButton = ({ phoneNumber, recipientName, courierName }: { phoneNumber: string; recipientName: string; courierName: string }) => {
  // Don't show if:
  // 1. Phone number is empty, N/A, or Auto Generated
  // 2. Phone number has less than 10 digits after cleaning
  if (!phoneNumber || 
      phoneNumber === "N/A" || 
      phoneNumber.toLowerCase().includes("auto generated") ||
      phoneNumber.toLowerCase().includes("autogenerated")) {
    return null;
  }
  
  const cleanNumber = phoneNumber.replace(/\D/g, "");
  if (cleanNumber.length < 10) {
    return null;
  }
  
  const formattedNumber = formatPhoneForWhatsApp(phoneNumber);
  const message = encodeURIComponent(`Halo pak ${recipientName}, saya ${courierName} kurir bce express. Yg akan mengirimkan paket bapak. Apakah alamat sudah sesuai di alamat pak? Atau boleh di kirimkan share lokasi nya?`);
  const whatsappUrl = `https://wa.me/${formattedNumber}?text=${message}`;
  
  return (
    <Button
      variant="outline"
      size="sm"
      className="ml-2 h-6 px-2 text-xs bg-green-50 hover:bg-green-100 border-green-200 text-green-700"
      onClick={() => window.open(whatsappUrl, "_blank")}
    >
      <FontAwesomeIcon icon={faComment} className="h-3 w-3 mr-1" />
      WA
    </Button>
  );
};

// Component for Maps button
const MapsButton = ({ address }: { address: string }) => {
  // Don't show if:
  // 1. Address is empty, N/A, or Auto Generated
  // 2. Address is too short (less than 10 characters to ensure it's properly filled)
  if (!address || 
      address === "N/A" || 
      address.toLowerCase().includes("auto generated") ||
      address.toLowerCase().includes("autogenerated") ||
      address.trim().length < 10) {
    return null;
  }
  
  const mapsUrl = `https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(address)}`;
  
  return (
    <Button
      variant="outline"
      size="sm"
      className="ml-2 h-6 px-2 text-xs bg-blue-50 hover:bg-blue-100 border-blue-200 text-blue-700"
      onClick={() => window.open(mapsUrl, "_blank")}
    >
      <FontAwesomeIcon icon={faMapMarkerAlt} className="h-3 w-3 mr-1" />
      Maps
    </Button>
  );
};

export function CourierDashboard() {
  const [currentUser, setCurrentUser] = useState<any>(null)
  const [completedCount, setCompletedCount] = useState(0)
  const [lastCompletedAwb, setLastCompletedAwb] = useState("")
  const [isBulkModalOpen, setIsBulkModalOpen] = useState(false)
  const [isContinuousScanOpen, setIsContinuousScanOpen] = useState(false)
  const [totalBulkShipments, setTotalBulkShipments] = useState(0)
  const [pendingDeliveries, setPendingDeliveries] = useState(0)
  const [bulkShipmentAwbs, setBulkShipmentAwbs] = useState<any[]>([])
  const [pendingShipments, setPendingShipments] = useState<any[]>([])
  const [showBulkDetails, setShowBulkDetails] = useState(false)
  const [showPendingDetails, setShowPendingDetails] = useState(false)
  const [completedTodayShipments, setCompletedTodayShipments] = useState<any[]>([])
  const [showCompletedTodayDetails, setShowCompletedTodayDetails] = useState(false)

  const [isProfileLoading, setIsProfileLoading] = useState(true)
  const [isShipmentsLoading, setIsShipmentsLoading] = useState(false)
  const refreshTimeout = useRef<NodeJS.Timeout | null>(null)

  const router = useRouter()
  const { toast } = useToast()

  const loadShipmentData = useCallback(async (user: any) => {
    setIsShipmentsLoading(true)
    try {
      const today = new Date()
      today.setHours(0, 0, 0, 0)
      const todayISOString = today.toISOString()
      const yesterday = new Date(today)
      yesterday.setDate(yesterday.getDate() - 1)
      const yesterdayISOString = yesterday.toISOString()
      
      const courierId = user?.id
      const courierName = user?.name || user?.email?.split("@")[0] || ""

      // Add timeout to all database queries
      const timeoutPromise = new Promise((_, reject) => 
        setTimeout(() => reject(new Error('Database timeout')), 15000)
      );

      // Get today's bulk shipments (Today's Assignment) - shipments created today that are not yet delivered/cancelled
      const bulkShipmentsPromise = supabaseClient
        .from("shipments")
        .select("awb_number, current_status, receiver_name, receiver_phone, receiver_address, updated_at")
        .eq("courier_id", courierId)
        .gte("created_at", todayISOString)
        .not("current_status", "in", '("delivered", "cancelled")') // Filter out delivered and cancelled shipments
        .order("updated_at", { ascending: false })
        .limit(50); 

      // Get pending deliveries with only necessary fields - with timeout
      const pendingPromise = supabaseClient
        .from("shipments")
        .select("awb_number, current_status, receiver_name, receiver_phone, receiver_address, created_at")
        .eq("courier_id", courierId)
        .in("current_status", ["out_for_delivery", "shipped"])
        .lt("created_at", todayISOString)
        .order("created_at", { ascending: false })
        .limit(50); // Limit results to improve performance

      // Get completed today with only necessary fields - with timeout
      const completedTodayPromise = supabaseClient
        .from("shipment_history")
        .select("awb_number, status, created_at, location")
        .eq("status", "delivered")
        .ilike("notes", `%${courierName}%`)
        .gte("created_at", todayISOString)
        .order("created_at", { ascending: false })
        .limit(100); // Limit results to improve performance

      // Execute all queries in parallel with timeout
      const [bulkShipmentsResult, pendingResult, completedTodayResult] = await Promise.allSettled([
        Promise.race([bulkShipmentsPromise, timeoutPromise]),
        Promise.race([pendingPromise, timeoutPromise]),
        Promise.race([completedTodayPromise, timeoutPromise])
      ]);

      // Handle bulk shipments result
      if (bulkShipmentsResult.status === 'fulfilled') {
        const { data: bulkShipmentsData, error: bulkShipmentsError } = bulkShipmentsResult.value as any;
        if (bulkShipmentsError) {
          setTotalBulkShipments(0);
          setBulkShipmentAwbs([]);
        } else {
          setTotalBulkShipments(bulkShipmentsData?.length || 0);
          setBulkShipmentAwbs(bulkShipmentsData || []);
        }
      } else {
        setTotalBulkShipments(0);
        setBulkShipmentAwbs([]);
      }

      // Handle pending deliveries result
      if (pendingResult.status === 'fulfilled') {
        const { data: pendingData, error: pendingError } = pendingResult.value as any;
        if (pendingError) {
          setPendingDeliveries(0);
          setPendingShipments([]);
        } else {
          setPendingDeliveries(pendingData?.length || 0);
          setPendingShipments(pendingData || []);
        }
      } else {
        setPendingDeliveries(0);
        setPendingShipments([]);
      }

      // Handle completed today result
      if (completedTodayResult.status === 'fulfilled') {
        const { data: completedTodayData, error: completedTodayError } = completedTodayResult.value as any;
        if (completedTodayError) {
          setCompletedCount(0);
          setCompletedTodayShipments([]);
          setLastCompletedAwb("");
        } else {
          setCompletedCount(completedTodayData?.length || 0);
          setCompletedTodayShipments(completedTodayData || []);
          if (completedTodayData && completedTodayData.length > 0) {
            const sortedData = [...completedTodayData].sort(
              (a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime(),
            );
            setLastCompletedAwb(sortedData[0].awb_number);
          } else {
            setLastCompletedAwb("");
          }
        }
      } else {
        setCompletedCount(0);
        setCompletedTodayShipments([]);
        setLastCompletedAwb("");
      }

    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to load shipment data. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsShipmentsLoading(false);
    }
  }, [toast]);

  const debouncedRefresh = useCallback((user: any) => {
    if (refreshTimeout.current) {
      clearTimeout(refreshTimeout.current)
    }
    
    const timeout = setTimeout(() => {
      loadShipmentData(user)
      refreshTimeout.current = null
    }, 1000)
    
    refreshTimeout.current = timeout
  }, [loadShipmentData])

  const loadUserProfile = useCallback(async () => {
    setIsProfileLoading(true)
    try {
      const { data: sessionData, error: sessionError } = await supabaseClient.auth.getSession()
      if (sessionError) {
        setIsProfileLoading(false)
        return
      }
      if (!sessionData?.session?.user?.id) {
        router.push("/courier")
        setIsProfileLoading(false)
        return
      }

      const userId = sessionData.session.user.id
      const { data: userData, error: userError } = await supabaseClient
        .from("users")
        .select("*")
        .eq("id", userId)
        .single()

      if (userError) {
        setIsProfileLoading(false)
        return
      }

      setCurrentUser(userData)
      setIsProfileLoading(false)
      // Load shipment data after user profile is loaded
      loadShipmentData(userData)
    } catch (err) {
      setIsProfileLoading(false)
      toast({
        title: "Error",
        description: "Failed to load user profile. Please try again.",
        variant: "destructive",
      })
    }
  }, [loadShipmentData, router, toast])

  useEffect(() => {
    loadUserProfile()

    // Cleanup function
    return () => {
      if (refreshTimeout.current) {
        clearTimeout(refreshTimeout.current)
      }
    }
  }, [loadUserProfile, refreshTimeout])

  const handleBulkUpdateSuccess = (count: number) => {
    toast({
      title: "Bulk Update Successful",
      description: `${count} shipments have been updated to "Out For Delivery" status.`,
    })
    if (currentUser) {
      debouncedRefresh(currentUser)
    }
  }

  const handleContinuousScanSuccess = () => {
    if (currentUser) {
      debouncedRefresh(currentUser)
    }
  }

  const handleLogout = async () => {
    try {
      await supabaseClient.auth.signOut()
      router.push("/courier")
    } catch (err) {
    }
  }

  if (isProfileLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-100 to-white dark:from-black dark:to-gray-900 flex justify-center items-center">
        <div className="text-center">
          <InProgressIcon className="h-8 w-8 animate-spin text-primary" />
          <p className="text-gray-600 dark:text-gray-400 font-semibold animate-pulse mt-2">Loading user profile...</p>
        </div>
      </div>
    )
  }

  const displayName = currentUser?.name || currentUser?.email?.split("@")[0] || ""
  const emailDisplay = currentUser?.email || ""

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-100 to-white dark:from-black dark:to-gray-900">
      {/* Watermark Background */}
      <div className="fixed inset-0 grid grid-cols-6 gap-x-12 gap-y-8 p-8 pointer-events-none select-none opacity-[0.04]">
        {Array.from({ length: 48 }).map((_, i) => (
          <div key={i} className="text-black dark:text-white -rotate-[36deg]">
            <span className="font-semibold text-sm whitespace-nowrap">BCE Express</span>
          </div>
        ))}
      </div>

      {/* Header */}
      <div className="max-w-7xl mx-auto px-3 sm:px-6 py-4 sm:py-8">
        <div className="bg-white dark:bg-gray-900 rounded-2xl shadow-xl border border-gray-200 dark:border-gray-700 p-4 sm:p-6 mb-6">
          <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
            <div>
              <h1 className="text-2xl sm:text-3xl font-bold text-gray-900 dark:text-white">
                Courier Dashboard
              </h1>
              <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
                Welcome, <span className="font-semibold text-gray-800 dark:text-gray-200">{displayName}</span> ({emailDisplay})
              </p>
              {lastCompletedAwb && (
                <p className="text-xs text-blue-600 dark:text-blue-400 mt-2">
                  Last AWB job finished: <span className="font-mono">{lastCompletedAwb}</span>
                </p>
              )}
            </div>
            <div className="flex flex-wrap gap-2 sm:gap-4 justify-center sm:justify-end items-center">
              <GoogleMapsButton />
              <Button
                variant="outline"
                onClick={handleLogout}
                className="h-8 px-3 text-xs font-bold border-gray-300 text-gray-700 hover:bg-gray-100 dark:border-gray-600 dark:text-gray-300 dark:hover:bg-gray-800/50"
              >
                <LogoutIcon className="h-4 w-4 mr-2 text-gray-700 dark:text-gray-300" style={{ fontWeight: 'bold' }} />
                Logout
              </Button>
            </div>
          </div>
        </div>
      </div>

      {/* Stats Cards */}
      <div className="max-w-7xl mx-auto px-3 sm:px-6 grid grid-cols-1 md:grid-cols-3 gap-3 sm:gap-6 mb-6">
        <div className="bg-white dark:bg-gray-900 rounded-2xl shadow-lg border border-gray-200 dark:border-gray-700 p-4 sm:p-6 hover:shadow-xl transition-all duration-300 flex flex-col">
          <div className="flex items-center gap-3 mb-4">
            <div className="w-12 h-12 sm:w-14 sm:h-14 bg-blue-100 dark:bg-blue-900/60 rounded-full flex items-center justify-center flex-shrink-0">
              <DeliveryParcelIcon className="h-6 w-6 sm:h-8 sm:w-8 text-blue-600 dark:text-blue-400" style={{ fontWeight: 'bold' }} />
            </div>
            <div className="flex-1">
              <span className="text-xs sm:text-sm font-bold text-gray-700 dark:text-gray-300 block mb-1">Today's Assignments</span>
              <span className="text-2xl sm:text-4xl font-black text-gray-900 dark:text-white leading-none block">{totalBulkShipments}</span>
            </div>
            {totalBulkShipments > 0 && (
              <Button
                variant="outline"
                size="sm"
                onClick={() => setShowBulkDetails(true)}
                className="h-8 px-3 text-xs font-bold border-gray-300 text-gray-700 hover:bg-gray-100 dark:border-gray-600 dark:text-gray-300 dark:hover:bg-gray-800/50"
              >
                <ViewIcon className="h-3 w-3 mr-1" style={{ fontWeight: 'bold' }} /> View
              </Button>
            )}
          </div>
        </div>

        <div className="bg-white dark:bg-gray-900 rounded-2xl shadow-lg border border-green-200 dark:border-green-700 p-4 sm:p-6 hover:shadow-xl transition-all duration-300 flex flex-col">
          <div className="flex items-center gap-3 mb-4">
            <div className="w-12 h-12 sm:w-14 sm:h-14 bg-green-100 dark:bg-green-900/60 rounded-full flex items-center justify-center flex-shrink-0">
              <CheckmarkIcon className="h-6 w-6 sm:h-8 sm:w-8 text-green-600 dark:text-green-400" style={{ fontWeight: 'bold' }} />
            </div>
            <div className="flex-1">
              <span className="text-xs sm:text-sm font-bold text-gray-700 dark:text-gray-300 block mb-1">Completed Today</span>
              {isShipmentsLoading ? (
                <div className="h-8 w-16 bg-gray-200 dark:bg-gray-700 rounded animate-pulse"></div>
              ) : (
                <span className="text-2xl sm:text-4xl font-black text-green-600 dark:text-green-400 leading-none block">{completedCount}</span>
              )}
            </div>
            {completedCount > 0 && (
              <Button
                variant="outline"
                size="sm"
                onClick={() => setShowCompletedTodayDetails(true)}
                className="h-8 px-3 text-xs font-bold border-gray-300 text-gray-700 hover:bg-gray-100 dark:border-gray-600 dark:text-gray-300 dark:hover:bg-gray-800/50"
              >
                <ViewIcon className="h-3 w-3 mr-1" style={{ fontWeight: 'bold' }} /> View Details
              </Button>
            )}
          </div>
        </div>

        <div className="bg-white dark:bg-gray-900 rounded-2xl shadow-lg border border-yellow-200 dark:border-yellow-700 p-4 sm:p-6 hover:shadow-xl transition-all duration-300 flex flex-col">
          <div className="flex items-center gap-3 mb-4">
            <div className="w-12 h-12 sm:w-14 sm:h-14 bg-yellow-100 dark:bg-yellow-900/60 rounded-full flex items-center justify-center flex-shrink-0">
              <WarningIcon className="h-6 w-6 sm:h-8 sm:w-8 text-yellow-600 dark:text-yellow-400" style={{ fontWeight: 'bold' }} />
            </div>
            <div className="flex-1">
              <span className="text-xs sm:text-sm font-bold text-gray-700 dark:text-gray-300 block mb-1">Pending Deliveries</span>
              {isShipmentsLoading ? (
                <div className="h-8 w-16 bg-gray-200 dark:bg-gray-700 rounded animate-pulse"></div>
              ) : (
                <span className="text-2xl sm:text-4xl font-black text-yellow-600 dark:text-yellow-400 leading-none block">{pendingDeliveries}</span>
              )}
            </div>
            {pendingDeliveries > 0 && (
              <Button
                variant="outline"
                size="sm"
                onClick={() => setShowPendingDetails(true)}
                className="h-8 px-3 text-xs font-bold border-gray-300 text-gray-700 hover:bg-gray-100 dark:border-gray-600 dark:text-gray-300 dark:hover:bg-gray-800/50"
              >
                <ViewIcon className="h-3 w-3 mr-1" style={{ fontWeight: 'bold' }} /> View Details
              </Button>
            )}
          </div>
        </div>
      </div>

      {/* Action Buttons */}
      <div className="max-w-7xl mx-auto px-3 sm:px-6 grid grid-cols-1 md:grid-cols-2 gap-3 sm:gap-6 mb-6">
        <Button
          className="w-full bg-gray-700 hover:bg-gray-600 dark:bg-gray-600 dark:hover:bg-gray-500 font-bold text-white h-auto py-4 text-base sm:text-lg shadow-lg"
          onClick={() => setIsContinuousScanOpen(true)}
        >
          <span className="bg-white p-1 rounded-md mr-2 flex items-center justify-center"><BarcodeIcon className="h-5 w-5 text-gray-700" style={{ fontWeight: 'bold' }} /></span>
          Continuous Scan
        </Button>
        <Button
          className="w-full bg-yellow-500 hover:bg-yellow-600 dark:bg-yellow-600 dark:hover:bg-yellow-700 font-bold text-gray-900 dark:text-white h-auto py-4 text-base sm:text-lg shadow-lg"
          onClick={() => setIsBulkModalOpen(true)}
        >
          <BoxIcon className="h-5 w-5 mr-2" style={{ fontWeight: 'bold' }} />
          Bulk Shipped Update
        </Button>
      </div>

      <BulkUpdateModal
        isOpen={isBulkModalOpen}
        onClose={() => setIsBulkModalOpen(false)}
        onSuccess={handleBulkUpdateSuccess}
      />

      <ContinuousScanModal
        isOpen={isContinuousScanOpen}
        onClose={() => setIsContinuousScanOpen(false)}
        onSuccess={handleContinuousScanSuccess}
      />

      {/* Bulk Shipments Details Dialog */}
      <Dialog open={showBulkDetails} onOpenChange={setShowBulkDetails}>
        <DialogContent className="max-w-3xl">
          <DialogHeader>
            <DialogTitle>Bulk Shipments Details</DialogTitle>
            <DialogDescription>
              These are the shipments that have been marked as "Out For Delivery" and are pending delivery
            </DialogDescription>
          </DialogHeader>

          <div className="max-h-[60vh] overflow-y-auto mt-4">
            {isShipmentsLoading && (bulkShipmentAwbs.length === 0) ? (
              <div className="animate-pulse space-y-4">
                <div className="h-6 bg-gray-200 dark:bg-gray-700 rounded w-40"></div>
                <div className="space-y-2">
                  <div className="h-16 bg-gray-200 dark:bg-gray-700 rounded"></div>
                  <div className="h-16 bg-gray-200 dark:bg-gray-700 rounded"></div>
                  <div className="h-16 bg-gray-200 dark:bg-gray-700 rounded"></div>
                </div>
              </div>
            ) : bulkShipmentAwbs.length > 0 ? (
              <div className="space-y-3">
                {bulkShipmentAwbs.map((shipment) => (
                  <div
                    key={shipment.awb_number}
                    className="p-3 border rounded-md flex justify-between items-center hover:bg-muted/50 transition-colors"
                  >
                    <div>
                      <div className="flex items-center gap-2">
                        <DeliveryParcelIcon className="h-4 w-4 text-blue-500" />
                        <span className="font-mono font-medium">{shipment.awb_number}</span>
                        <Badge variant="outline" className="ml-2">
                          Out For Delivery
                        </Badge>
                      </div>
                      <p className="text-sm mt-1">Receiver: {shipment.receiver_name !== "Auto Generated" ? shipment.receiver_name : "Auto Generated Shipment"}</p>
                      <div className="flex items-center mt-1">
                        <p className="text-sm">Phone: {shipment.receiver_phone || "N/A"}</p>
                        {shipment.receiver_phone && (
                          <WhatsAppButton 
                            phoneNumber={shipment.receiver_phone} 
                            recipientName={shipment.receiver_name || "Customer"} 
                            courierName={displayName}
                          />
                        )}
                      </div>
                      <div className="flex items-center mt-1">
                        <p className="text-sm">Address: {shipment.receiver_address}</p>
                        <MapsButton address={shipment.receiver_address} />
                      </div>
                      <p className="text-sm mt-1">Current Status: {shipment.current_status}</p>
                      <p className="text-xs text-muted-foreground mt-1">
                        Updated: {new Date(shipment.updated_at).toLocaleString()}
                      </p>
                    </div>
                    <Button size="sm" onClick={() => router.push(`/courier/update?awb=${shipment.awb_number}`)}>
                      Update
                    </Button>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-8 text-muted-foreground">No bulk shipments found</div>
            )}
          </div>
        </DialogContent>
      </Dialog>

      {/* Add Pending Deliveries Dialog */}
      <Dialog open={showPendingDetails} onOpenChange={setShowPendingDetails}>
        <DialogContent className="max-w-3xl">
          <DialogHeader>
            <DialogTitle>Pending Deliveries</DialogTitle>
            <DialogDescription>
              These are shipments from previous days that are still pending delivery
            </DialogDescription>
          </DialogHeader>

          <div className="max-h-[60vh] overflow-y-auto mt-4">
            {isShipmentsLoading && (pendingShipments.length === 0) ? (
              <div className="animate-pulse space-y-4">
                <div className="h-6 bg-gray-200 dark:bg-gray-700 rounded w-40"></div>
                <div className="space-y-2">
                  <div className="h-16 bg-gray-200 dark:bg-gray-700 rounded"></div>
                  <div className="h-16 bg-gray-200 dark:bg-gray-700 rounded"></div>
                  <div className="h-16 bg-gray-200 dark:bg-gray-700 rounded"></div>
                </div>
              </div>
            ) : pendingShipments.length > 0 ? (
              <div className="space-y-3">
                {pendingShipments.map((shipment) => (
                  <div
                    key={shipment.awb_number}
                    className="p-3 border rounded-md flex justify-between items-center hover:bg-muted/50 transition-colors"
                  >
                    <div>
                      <div className="flex items-center gap-2">
                        <DeliveryParcelIcon className="h-4 w-4 text-yellow-500" />
                        <span className="font-mono font-medium">{shipment.awb_number}</span>
                        <Badge variant="outline" className="text-xs">OFD</Badge>
                      </div>
                      <p className="text-sm mt-1">Receiver: {shipment.receiver_name !== "Auto Generated" ? shipment.receiver_name : "Auto Generated Shipment"}</p>
                      <div className="flex items-center mt-1">
                        <p className="text-sm">Phone: {shipment.receiver_phone || "N/A"}</p>
                        {shipment.receiver_phone && (
                          <WhatsAppButton 
                            phoneNumber={shipment.receiver_phone} 
                            recipientName={shipment.receiver_name || "Customer"} 
                            courierName={displayName}
                          />
                        )}
                      </div>
                      <div className="flex items-center mt-1">
                        <p className="text-sm">Address: {shipment.receiver_address}</p>
                        <MapsButton address={shipment.receiver_address} />
                      </div>
                      <p className="text-xs text-muted-foreground mt-1">
                        Created: {new Date(shipment.created_at).toLocaleString()}
                      </p>
                    </div>
                    <Button size="sm" onClick={() => router.push(`/courier/update?awb=${shipment.awb_number}`)}>
                      Update
                    </Button>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-8 text-muted-foreground">No pending deliveries found</div>
            )}
          </div>
        </DialogContent>
      </Dialog>

      {/* Completed Today Details Dialog */}
      <Dialog open={showCompletedTodayDetails} onOpenChange={setShowCompletedTodayDetails}>
        <DialogContent className="max-w-3xl">
          <DialogHeader>
            <DialogTitle>Shipments Completed Today</DialogTitle>
            <DialogDescription>These are the shipments that you have marked as "Delivered" today.</DialogDescription>
          </DialogHeader>

          <div className="max-h-[60vh] overflow-y-auto mt-4">
            {isShipmentsLoading && (completedTodayShipments.length === 0) ? (
              <div className="animate-pulse space-y-4">
                <div className="h-6 bg-gray-200 dark:bg-gray-700 rounded w-40"></div>
                <div className="space-y-2">
                  <div className="h-16 bg-gray-200 dark:bg-gray-700 rounded"></div>
                  <div className="h-16 bg-gray-200 dark:bg-gray-700 rounded"></div>
                  <div className="h-16 bg-gray-200 dark:bg-gray-700 rounded"></div>
                </div>
              </div>
            ) : completedTodayShipments.length > 0 ? (
              <div className="space-y-3">
                {completedTodayShipments.map((shipment) => (
                  <div
                    key={shipment.awb_number}
                    className="p-3 border rounded-md flex justify-between items-center hover:bg-muted/50 transition-colors"
                  >
                    <div>
                      <div className="flex items-center gap-2">
                        <FontAwesomeIcon icon={faCheckCircle} className="h-4 w-4 text-green-500" />
                        <span className="font-mono font-medium">{shipment.awb_number}</span>
                      </div>
                      <p className="text-sm mt-1">Location: {shipment.location}</p>
                      <p className="text-xs text-muted-foreground mt-1">
                        Completed at: {new Date(shipment.created_at).toLocaleString()}
                      </p>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-8 text-muted-foreground">No shipments completed today</div>
            )}
          </div>
        </DialogContent>
      </Dialog>
    </div>
  )
}
