import { Card, CardContent, CardHeader } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { MapPin, Package, CheckCircle, AlertTriangle, Truck, Box } from "lucide-react"
import { supabaseClient } from "@/lib/auth"
import type { ShipmentStatus } from "@/lib/db"

export async function TrackingResults({ awbNumber }: { awbNumber: string }) {
  // Fetch shipment data directly from Supabase
  const { data: shipment, error: shipmentError } = await supabaseClient
    .from("shipments")
    .select("*")
    .eq("awb_number", awbNumber)
    .single()

  // Fetch shipment history
  const { data: history, error: historyError } = await supabaseClient
    .from("shipment_history")
    .select("*")
    .eq("awb_number", awbNumber)
    .order("created_at", { ascending: false })

  // Get the courier who last updated this shipment
  let courierName = "BCE Express"
  let lastUpdateTime = ""

  if (history && history.length > 0) {
    // Get the most recent history entry
    const latestEntry = history[0]
    lastUpdateTime = new Date(latestEntry.created_at).toLocaleString("id-ID", {
      timeZone: "Asia/Jakarta",
      year: "numeric",
      month: "numeric",
      day: "numeric",
      hour: "numeric",
      minute: "numeric",
      second: "numeric",
    })

    // Try to extract courier name from notes
    if (latestEntry.notes) {
      // Check for patterns like "by [name]" or "- [name]"
      const byMatch = latestEntry.notes.match(/by\s+(\w+)/i)
      const dashMatch = latestEntry.notes.match(/-\s+(\w+)/i)

      if (byMatch && byMatch[1]) {
        courierName = byMatch[1]
      } else if (dashMatch && dashMatch[1]) {
        courierName = dashMatch[1]
      } else if (latestEntry.notes.includes("Bulk update")) {
        // For bulk updates, try to extract the name after "Bulk update - Shipped by "
        const bulkMatch = latestEntry.notes.match(/Bulk update - Shipped by\s+(\w+)/i)
        if (bulkMatch && bulkMatch[1]) {
          courierName = bulkMatch[1]
        }
      }
    }
  }

  // At the top of the TrackingResults function, after the existing imports and before fetching shipment data
  let isCourier = false;
  const sessionResponse = await supabaseClient.auth.getSession();
  if (sessionResponse.data && sessionResponse.data.session?.user) {
    const { data: profile } = await supabaseClient.from('users').select('role').eq('id', sessionResponse.data.session.user.id).single();
    if (profile?.role === 'courier') {
      isCourier = true;
    }
  }

  if (shipmentError || !shipment) {
    return (
      <div className="text-center py-12">
        <h2 className="text-2xl font-bold text-foreground mb-4">Shipment Not Found</h2>
        <p className="text-muted-foreground mb-6">
          We couldn&apos;t find any shipment with the AWB number: <span className="font-mono">{awbNumber}</span>
        </p>
        <p className="text-muted-foreground">
          Please check the AWB number and try again, or contact our customer service for assistance.
        </p>
      </div>
    )
  }

  const shipmentHistory = history || []

  // Calculate progress percentage based on status
  const getProgressPercentage = (status: ShipmentStatus) => {
    switch (status) {
      case "processed":
        return 0
      case "shipped":
        return 25
      case "in_transit":
        return 50
      case "out_for_delivery":
        return 75
      case "delivered":
        return 100
      case "exception":
        return 50
      default:
        return 0
    }
  }

  const progressPercentage = getProgressPercentage(shipment.current_status as ShipmentStatus)

  // Get status icon
  const getStatusIcon = (status: ShipmentStatus) => {
    switch (status) {
      case "processed":
        return <Box className="h-5 w-5" />
      case "shipped":
        return <Truck className="h-5 w-5" />
      case "in_transit":
        return <Truck className="h-5 w-5" />
      case "out_for_delivery":
        return <Truck className="h-5 w-5" />
      case "delivered":
        return <CheckCircle className="h-5 w-5" />
      case "exception":
        return <AlertTriangle className="h-5 w-5" />
      default:
        return <Package className="h-5 w-5" />
    }
  }

  // Format status text
  const formatStatus = (status: string) => {
    return status.replace(/_/g, " ").replace(/\b\w/g, (l) => l.toUpperCase())
  }

  // Check if this is an auto-generated shipment
  const isAutoGenerated = shipment.sender_name === "Auto Generated" && shipment.receiver_name === "Auto Generated"

  return (
    <Card className="shadow-lg border border-border/40">
      <CardHeader className="bg-primary text-primary-foreground">
        <div className="flex flex-col sm:flex-row justify-between items-center text-center sm:text-left px-4 sm:px-6 overflow-hidden">
          <h2 className="text-2xl font-bold mb-2 sm:mb-0">Shipment Details</h2>
          <Badge variant="secondary" className="bg-primary-foreground text-primary font-mono text-2xl sm:text-4xl font-bold w-full sm:w-auto text-center sm:text-left mx-auto sm:mx-0 max-w-full overflow-x-auto whitespace-nowrap">
            AWB: {awbNumber}
          </Badge>
        </div>
      </CardHeader>

      <CardContent className="p-6">
        {isAutoGenerated ? (
          <div className="bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg mb-6">
            <h3 className="text-lg font-semibold mb-2">Courier Information</h3>
            <p className="font-medium">
              Handled by: {courierName}
              {lastUpdateTime && (
                <span className="block text-sm text-blue-600 dark:text-blue-400 mt-1">
                  Last updated: {lastUpdateTime}
                </span>
              )}
            </p>
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
            <div className="bg-muted/50 p-4 rounded-lg">
              <h3 className="text-muted-foreground font-semibold mb-2">Sender</h3>
              <p className="font-medium">
                {shipment.sender_name}
                <br />
                {shipment.sender_address}
                <br />
                {isCourier ? shipment.sender_phone : 'Hidden for privacy'}
              </p>
            </div>
            <div className="bg-muted/50 p-4 rounded-lg">
              <h3 className="text-muted-foreground font-semibold mb-2">Receiver</h3>
              <p className="font-medium">
                {shipment.receiver_name}
                <br />
                {shipment.receiver_address}
                <br />
                {isCourier ? shipment.receiver_phone : 'Hidden for privacy'}
              </p>
            </div>
            <div className="bg-muted/50 p-4 rounded-lg">
              <h3 className="text-muted-foreground font-semibold mb-2">Shipment Details</h3>
              <p className="font-medium">
                Weight: {shipment.weight} kg
                <br />
                Dimensions: {shipment.dimensions}
                <br />
                Service: {shipment.service_type}
              </p>
            </div>
          </div>
        )}

        <div className="mb-8">
          <h3 className="text-lg font-semibold mb-4">
            Current Status: <span className="text-primary">{formatStatus(shipment.current_status)}</span>
          </h3>

          <div className="tracking-progress">
            <div className="tracking-progress-bar" style={{ width: `${progressPercentage}%` }}></div>
            <div
              className={`status-dot ${progressPercentage >= 0 ? "active" : "inactive"}`}
              style={{ left: "0%" }}
            ></div>
            <div
              className={`status-dot ${progressPercentage >= 25 ? "active" : "inactive"}`}
              style={{ left: "25%" }}
            ></div>
            <div
              className={`status-dot ${progressPercentage >= 50 ? "active" : "inactive"}`}
              style={{ left: "50%" }}
            ></div>
            <div
              className={`status-dot ${progressPercentage >= 75 ? "active" : "inactive"}`}
              style={{ left: "75%" }}
            ></div>
            <div
              className={`status-dot ${progressPercentage >= 100 ? "active" : "inactive"}`}
              style={{ left: "100%" }}
            ></div>
          </div>

          <div className="flex justify-between text-xs text-muted-foreground mt-1">
            <span>Processed</span>
            <span>Shipped</span>
            <span>In Transit</span>
            <span>Out for Delivery</span>
            <span>Delivered</span>
          </div>
        </div>

        <div className="mb-8">
          <h3 className="text-lg font-semibold mb-4">Tracking History</h3>
          <div className="space-y-4">
            {shipmentHistory.map((item) => (
              <div key={item.id} className="flex">
                <div className="mr-4">
                  <div
                    className={`flex items-center justify-center w-10 h-10 rounded-full ${
                      item.status?.toLowerCase().includes("delivered")
                        ? "text-green-500 bg-green-100 dark:bg-green-900/30"
                        : item.status === "exception"
                          ? "text-red-500 bg-red-100 dark:bg-red-900/30"
                          : "text-primary bg-primary/10"
                    }`}
                  >
                    {getStatusIcon(item.status as ShipmentStatus)}
                  </div>
                </div>
                <div className="flex-grow">
                  <div className="flex justify-between items-center">
                    <h4 className="font-semibold capitalize">
                      {formatStatus(item.status)}{" "}
                      {item.status?.toLowerCase().includes("delivered") && item.photo_url && (
                        <a
                          href={item.photo_url}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="text-blue-500 hover:underline ml-2"
                        >
                          POD Pengiriman
                        </a>
                      )}
                    </h4>
                    <span className="text-sm text-muted-foreground">
                      {new Date(item.created_at).toLocaleDateString("id-ID", {
                        timeZone: "Asia/Jakarta",
                        year: "numeric",
                        month: "numeric",
                        day: "numeric",
                      })}{" "}
                      {new Date(item.created_at).toLocaleTimeString("id-ID", {
                        timeZone: "Asia/Jakarta",
                        hour: "numeric",
                        minute: "numeric",
                        second: "numeric",
                      })}
                    </span>
                  </div>
                  <p className="text-foreground/80">{item.location}</p>
                  {item.notes && <p className="text-sm text-muted-foreground mt-1">{item.notes}</p>}

                  {item.latitude && item.longitude && (
                    <div className="mt-2 text-xs text-muted-foreground flex items-center">
                      <MapPin className="h-3 w-3 mr-1" />
                      GPS: {item.latitude.toFixed(6)}, {item.longitude.toFixed(6)}
                    </div>
                  )}
                </div>
              </div>
            ))}

            {shipmentHistory.length === 0 && (
              <p className="text-muted-foreground italic">No tracking history available yet.</p>
            )}
          </div>
        </div>

        {/* Bagian Proof of Delivery yang menampilkan foto di luar hyperlink */}
        {/* Komentari atau hapus blok kode di bawah ini jika Anda hanya ingin foto muncul saat hyperlink diklik */}
        {/* {shipment.current_status === "delivered" && shipmentHistory.some((item) => item.photo_url) && (
          <div>
            <h3 className="text-lg font-semibold mb-4">Proof of Delivery</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {shipmentHistory
                .filter((item) => item.photo_url)
                .map((item) => (
                  <div key={`pod-${item.id}`} className="border rounded-lg p-2">
                    <Image
                      src={item.photo_url! || "/placeholder.svg"}
                      alt="Proof of delivery"
                      width={400}
                      height={300}
                      className="rounded-md object-cover w-full h-auto photo-preview"
                    />
                    <p className="text-sm text-muted-foreground mt-2">
                      {new Date(item.created_at).toLocaleDateString("id-ID", {
                        timeZone: "Asia/Jakarta",
                        year: "numeric",
                        month: "numeric",
                        day: "numeric",
                      })}{" "}
                      {new Date(item.created_at).toLocaleTimeString("id-ID", {
                        timeZone: "Asia/Jakarta",
                        hour: "numeric",
                        minute: "numeric",
                        second: "numeric",
                      })}
                    </p>
                  </div>
                ))}
            </div>
          </div>
        )} */}
        {/* Akhir dari bagian Proof of Delivery */}
      </CardContent>
    </Card>
  )
}
